diff --git a/barretenberg/CMakeLists.txt b/barretenberg/CMakeLists.txt
index 8c9a883f..bc5f11f0 100644
--- a/barretenberg/CMakeLists.txt
+++ b/barretenberg/CMakeLists.txt
@@ -13,8 +13,8 @@ project(Barretenberg
 option(DISABLE_ASM "Disable custom assembly" OFF)
 option(DISABLE_ADX "Disable ADX assembly variant" OFF)
 option(MULTITHREADING "Enable multi-threading" ON)
-option(TESTING "Build tests" ON)
-option(BENCHMARKS "Build benchmarks" ON)
+option(TESTING "Build tests" OFF)
+option(BENCHMARKS "Build benchmarks" OFF)
 
 if(ARM)
     message(STATUS "Compiling for ARM.")
diff --git a/barretenberg/bootstrap.sh b/barretenberg/bootstrap.sh
index c9066f19..d59c0466 100755
--- a/barretenberg/bootstrap.sh
+++ b/barretenberg/bootstrap.sh
@@ -26,12 +26,12 @@ cd ..
 
 # Pick native toolchain file.
 if [ "$OS" == "macos" ]; then
-    export BREW_PREFIX=$(brew --prefix)
+    # export BREW_PREFIX=$(brew --prefix)
     # Ensure we have toolchain.
-    if [ ! "$?" -eq 0 ] || [ ! -f "$BREW_PREFIX/opt/llvm/bin/clang++" ]; then
-        echo "Default clang not sufficient. Install homebrew, and then: brew install llvm libomp clang-format"
-        exit 1
-    fi
+    # if [ ! "$?" -eq 0 ] || [ ! -f "$BREW_PREFIX/opt/llvm/bin/clang++" ]; then
+        # echo "Default clang not sufficient. Install homebrew, and then: brew install llvm libomp clang-format"
+        # exit 1
+    # fi
     ARCH=$(uname -m)
     if [ "$ARCH" = "arm64" ]; then
         TOOLCHAIN=arm-apple-clang
@@ -49,13 +49,13 @@ cmake --build . --parallel
 cd ..
 
 # Install the webassembly toolchain.
-rm -rf ./src/wasi-sdk-12.0
-cd ./src
-curl -s -L https://github.com/CraneStation/wasi-sdk/releases/download/wasi-sdk-12/wasi-sdk-12.0-$OS.tar.gz | tar zxfv -
-cd ..
-
-# Build WASM.
-mkdir -p build-wasm && cd build-wasm
-cmake -DTOOLCHAIN=wasm-linux-clang ..
-cmake --build . --parallel --target barretenberg.wasm
-cd ..
\ No newline at end of file
+# rm -rf ./src/wasi-sdk-12.0
+# cd ./src
+# curl -s -L https://github.com/CraneStation/wasi-sdk/releases/download/wasi-sdk-12/wasi-sdk-12.0-$OS.tar.gz | tar zxfv -
+# cd ..
+
+# # Build WASM.
+# mkdir -p build-wasm && cd build-wasm
+# cmake -DTOOLCHAIN=wasm-linux-clang ..
+# cmake --build . --parallel --target barretenberg.wasm
+# cd ..
\ No newline at end of file
diff --git a/barretenberg/cmake/toolchains/x86_64-apple-clang.cmake b/barretenberg/cmake/toolchains/x86_64-apple-clang.cmake
index 35440991..f3ab1375 100644
--- a/barretenberg/cmake/toolchains/x86_64-apple-clang.cmake
+++ b/barretenberg/cmake/toolchains/x86_64-apple-clang.cmake
@@ -1,3 +1,3 @@
 set(APPLE ON)
-set(CMAKE_CXX_COMPILER "$ENV{BREW_PREFIX}/opt/llvm/bin/clang++")
-set(CMAKE_C_COMPILER "$ENV{BREW_PREFIX}/opt/llvm/bin/clang")
\ No newline at end of file
+# set(CMAKE_CXX_COMPILER "$ENV{BREW_PREFIX}/opt/llvm/bin/clang++")
+# set(CMAKE_C_COMPILER "$ENV{BREW_PREFIX}/opt/llvm/bin/clang")
\ No newline at end of file
diff --git a/barretenberg_wrapper/build.rs b/barretenberg_wrapper/build.rs
index dae01733..205329ac 100644
--- a/barretenberg_wrapper/build.rs
+++ b/barretenberg_wrapper/build.rs
@@ -61,16 +61,24 @@ fn select_cpp_stdlib() -> &'static str {
 fn set_brew_env_var(toolchain: &'static str) {
     // The cmake file for macos uses an environment variable
     // to figure out where to find certain programs installed via brew
-    if toolchain == INTEL_APPLE || toolchain == ARM_APPLE {
-        let output = std::process::Command::new("brew")
-            .arg("--prefix")
-            .stdout(std::process::Stdio::piped())
-            .output()
-            .expect("Failed to execute command to run `brew --prefix` is brew installed?");
+    let brew_key = "BREW_PREFIX";
 
-        let stdout = String::from_utf8(output.stdout).unwrap();
-
-        env::set_var("BREW_PREFIX", stdout.trim());
+    match env::var(brew_key) {
+        Ok(val) => println!("BREW_PERFIX already set to {val:?}"),
+        Err(_) => {
+            if toolchain == INTEL_APPLE || toolchain == ARM_APPLE {
+                let output = std::process::Command::new("brew")
+                    .arg("--prefix")
+                    .stdout(std::process::Stdio::piped())
+                    .output()
+                    .expect("Failed to execute command to run `brew --prefix` is brew installed?");
+        
+                let stdout = String::from_utf8(output.stdout).unwrap();
+        
+                env::set_var(brew_key, stdout.trim());
+            }
+        }
+    
     }
 }
 
@@ -235,7 +243,9 @@ fn link_lib_omp(toolchain: &'static str) {
         INTEL_APPLE | ARM_APPLE => {
             println!("cargo:rustc-link-lib=omp")
         }
-        &_ => println!("cargo:rustc-link-lib=omp5")
+        &_ => {
+            println!("cargo:rustc-link-lib=omp")
+        }
     }
 }
 
